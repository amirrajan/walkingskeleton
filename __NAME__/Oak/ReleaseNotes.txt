============== FOR VERSIONS ==============
oak 2.3.1+
oak-edge 1.5.7+
gemini 1.1.7+
cambium 1.3.0+
=============== CHANGES ==================
- oak, oak-edge, cambium:
    - Bug fix on changes module to only look at writable properties as opposed to all properties
    - Added Bullet.cs which can be used to find N+1 query and redundant Query issues

If you are upgrading your version of oak, you'll have to add the following line to Global.asax to incorporate Bullet:
Inside global.asax.cs:
public class MvcApplication : System.Web.HttpApplication
{
    public MvcApplication()
    {
        DebugBootStrap.Init(this); /* <--- this line will incoporate N+1, redudant query, and exception notification in iisexpress */
    }
}

- gemini: added and introspection method called HashOfWritableProperties()


============== FOR VERSIONS ==============
oak 2.2.9+
oak-edge 1.4.7+
gemini 1.1.4+
cambium 1.2.9+
=============== CHANGES ==================
- Added StrongParameters module to protect against mass assignment via SetMembers, here is an example usage:



============== FOR VERSIONS ==============
oak 2.2.9+
oak-edge 1.4.7+
gemini 1.1.4+
cambium 1.2.9+
=============== CHANGES ==================
- Eager loading for collections added.  Example is here: https://github.com/amirrajan/Oak/blob/master/Oak.Tests/describe_DynamicModels/eager_loading_for_has_many_and_belongs_to.cs#L95


============== FOR VERSIONS ==============

oak 2.2.5+
oak-edge 1.3.3+
gemini 1.1.4+
cambium 1.2.3+
=============== CHANGES ==================
- Camibum and company now plays nice with auto properties.
  If you get the Invalid column name Exception when saving a Gemini, 
  you can remove properties from Gemini's using the Exclude() method.  
  Override your repository's GetAttributesToSave()
  these columns from being persisted.
  Example: https://github.com/amirrajan/Oak/blob/master/Sample%20Apps/BorrowedGames/BorrowedGames/Repositories/WantedGames.cs
- Added InitializeExtensions method. If you want to leverage mix-ins, 
  this method need to be explicitly called in the constructor of classes
  that use *static* auto properties. Invocation is automatically done
  if you use dynamic properties.
- The Expando property in Gemini is now named Prototype.
- Case invariant dictionary is used now to store dynamic properties (ie Prototype).
